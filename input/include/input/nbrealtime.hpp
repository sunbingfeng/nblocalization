/**
 * Author: Bill(cocobill1987ATgmail.com)
 * Description: Class responding to datasource generated by realtime capture
 * License: see the LICENSE.txt file
 */
#ifndef NBLOCALIZATION_REALTIME_H_
#define NBLOCALIZATION_REALTIME_H_

#include <thread>

#include <input/nbdatasource.hpp>

namespace nblocalization {
namespace input {

class NBRealtime : public NBDatasource {
public:
  NBRealtime() { std::cout << "NBRealtime construct!" << std::endl; };
  ~NBRealtime(){};

  virtual bool start() override {
    mp_thread_readimu = std::thread(&NBRealtime::readImuLoop, this);
    mp_thread_readimg = std::thread(&NBRealtime::readImgLoop, this);

    return true;
  }

protected:
  virtual void readImuLoop() override {
    while (!is_exit_requested) {
      // Step 1, capture latest imu frames
      std::vector<IMUData> imus(0);
      // TODO: add capture logic, and insert to imus vector

      // Step 2, notify observers.
      nbobservable::Observable<t_imu_callback>::notifyObservers(imus);
    }
  }

  virtual void readImgLoop() override {
    while (!is_exit_requested) {
      // Step 1, capture stereo images
      CameraData left, right;
      // TODO: add capture logic, and initialize left/right mat data

      // Step 2, notify observers
      nbobservable::Observable<t_stereo_callback>::notifyObservers(left, right);
    }
  }
};
} // namespace input
} // namespace nblocalization
#endif // NBLOCALIZATION_REALTIME_H_